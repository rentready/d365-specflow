// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RR.Dynamics365.SpecFlow.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreateAccountFeature : object, Xunit.IClassFixture<CreateAccountFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CreateAccount.feature"
#line hidden
        
        public CreateAccountFeature(CreateAccountFeature.FixtureData fixtureData, RR_Dynamics365_SpecFlow_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CreateAccount", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Should Create an Account with name Awersome Account and Default numberofemployees" +
            " = 10")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateAccount")]
        [Xunit.TraitAttribute("Description", "Should Create an Account with name Awersome Account and Default numberofemployees" +
            " = 10")]
        public void ShouldCreateAnAccountWithNameAwersomeAccountAndDefaultNumberofemployees10()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should Create an Account with name Awersome Account and Default numberofemployees" +
                    " = 10", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table1.AddRow(new string[] {
                            "name",
                            "Awersome Account"});
#line 4
 testRunner.Given("an account named MainAccount created with the following values", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table2.AddRow(new string[] {
                            "name",
                            "Awersome Account"});
#line 7
 testRunner.Given("an existing account named Altername with the following values is available within" +
                        " 0 seconds", ((string)(null)), table2, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table3.AddRow(new string[] {
                            "name",
                            "Awersome Account"});
#line 10
 testRunner.Given("an account named Altername2 exists with the following values", ((string)(null)), table3, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table4.AddRow(new string[] {
                            "name",
                            "Awersome Account"});
                table4.AddRow(new string[] {
                            "numberofemployees",
                            "10"});
#line 13
 testRunner.Then("I expect an account exists with the following values", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Should Update an Account name")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateAccount")]
        [Xunit.TraitAttribute("Description", "Should Update an Account name")]
        public void ShouldUpdateAnAccountName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should Update an Account name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table5.AddRow(new string[] {
                            "name",
                            "Awersome Account"});
#line 19
 testRunner.Given("an account named MainAccount created with the following values", ((string)(null)), table5, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table6.AddRow(new string[] {
                            "name",
                            "Bad Account"});
#line 22
 testRunner.When("I update MainAccount with the following values", ((string)(null)), table6, "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table7.AddRow(new string[] {
                            "name",
                            "Bad Account"});
#line 25
 testRunner.Then("I expect an account exists with the following values", ((string)(null)), table7, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Should map lookup fields by an entity\'s primary name")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateAccount")]
        [Xunit.TraitAttribute("Description", "Should map lookup fields by an entity\'s primary name")]
        public void ShouldMapLookupFieldsByAnEntitysPrimaryName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should map lookup fields by an entity\'s primary name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table8.AddRow(new string[] {
                            "fullname",
                            "John Snow"});
#line 30
 testRunner.Given("a contact named MainContact created with the following values", ((string)(null)), table8, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table9.AddRow(new string[] {
                            "name",
                            "Awersome Account"});
                table9.AddRow(new string[] {
                            "primarycontactid",
                            "John Snow"});
#line 33
 testRunner.Given("an account named MainAccount created with the following values", ((string)(null)), table9, "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Should map lookup fields by an entity\'s alias")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateAccount")]
        [Xunit.TraitAttribute("Description", "Should map lookup fields by an entity\'s alias")]
        public void ShouldMapLookupFieldsByAnEntitysAlias()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should map lookup fields by an entity\'s alias", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table10.AddRow(new string[] {
                            "fullname",
                            "John Snow"});
#line 39
 testRunner.Given("a contact named MainContact created with the following values", ((string)(null)), table10, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table11.AddRow(new string[] {
                            "name",
                            "Awersome Account"});
                table11.AddRow(new string[] {
                            "primarycontactid",
                            "MainContact"});
#line 42
 testRunner.Given("an account named MainAccount created with the following values", ((string)(null)), table11, "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Should create a list of accounts")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateAccount")]
        [Xunit.TraitAttribute("Description", "Should create a list of accounts")]
        public void ShouldCreateAListOfAccounts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should create a list of accounts", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Alias",
                            "name"});
                table12.AddRow(new string[] {
                            "Acc1",
                            "Awersome Account"});
                table12.AddRow(new string[] {
                            "Acc2",
                            "Bad Account"});
#line 48
 testRunner.Given("entities account created with the following values", ((string)(null)), table12, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Alias",
                            "name"});
                table13.AddRow(new string[] {
                            "Acc1.1",
                            "Awersome Account"});
                table13.AddRow(new string[] {
                            "Acc2.1",
                            "Bad Account"});
#line 52
 testRunner.Given("entities account exist with the following values", ((string)(null)), table13, "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CreateAccountFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CreateAccountFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
